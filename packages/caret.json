{
	"objects" : [
		"anovaScores",
		"as.data.frame.resamples",
		"as.matrix.resamples",
		"avNNet",
		"avNNet.default",
		"bag",
		"bag.default",
		"bagControl",
		"bagEarth",
		"bagEarth.default",
		"bagEarth.formula",
		"bagEarthStats",
		"bagFDA",
		"bagFDA.default",
		"bagFDA.formula",
		"best",
		"BoxCoxTrans",
		"calibration",
		"caretFuncs",
		"caretGA",
		"caretSA",
		"caretSBF",
		"caretTheme",
		"cforestStats",
		"checkConditionalX",
		"checkInstall",
		"checkResamples",
		"class2ind",
		"classDist",
		"classDist.default",
		"cluster",
		"cluster.resamples",
		"compare_models",
		"confusionMatrix",
		"confusionMatrix.train",
		"contr.dummy",
		"contr.ltfr",
		"createDataPartition",
		"createFolds",
		"createModel",
		"createMultiFolds",
		"createResample",
		"createTimeSlices",
		"ctreeBag",
		"defaultSummary",
		"densityplot.rfe",
		"densityplot.train",
		"dotPlot",
		"downSample",
		"dummyVars",
		"dummyVars.default",
		"expandParameters",
		"expoTrans",
		"extractPrediction",
		"extractProb",
		"featurePlot",
		"filterVarImp",
		"findCorrelation",
		"findLinearCombos",
		"flatTable",
		"gafs",
		"gafs_initial",
		"gafs_lrSelection",
		"gafs_raMutation",
		"gafs_rwSelection",
		"gafs_spCrossover",
		"gafs_tourSelection",
		"gafs_uCrossover",
		"gafs.default",
		"gafsControl",
		"gamFormula",
		"gamFuncs",
		"gamScores",
		"getModelInfo",
		"getSamplingInfo",
		"getTrainPerf",
		"ggplot.rfe",
		"ggplot.train",
		"hasTerms",
		"histogram.rfe",
		"icr",
		"icr.default",
		"icr.formula",
		"index2vec",
		"ipredStats",
		"knn3",
		"knn3.data.frame",
		"knn3.formula",
		"knn3.matrix",
		"knn3Train",
		"knnreg",
		"knnreg.data.frame",
		"knnreg.default",
		"knnreg.matrix",
		"knnregTrain",
		"ldaBag",
		"ldaFuncs",
		"ldaSBF",
		"learing_curve_dat",
		"lift",
		"lmFuncs",
		"lmSBF",
		"LPH07_1",
		"LPH07_2",
		"lrFuncs",
		"maxDissim",
		"MeanSD",
		"minDiss",
		"mnLogLoss",
		"modelCor",
		"modelLookup",
		"multiClassSummary",
		"nbBag",
		"nbFuncs",
		"nbSBF",
		"nearZeroVar",
		"negPredValue",
		"negPredValue.default",
		"negPredValue.table",
		"nnetBag",
		"nullModel",
		"nullModel.default",
		"nzv",
		"oneSE",
		"panel.calibration",
		"panel.lift",
		"panel.lift2",
		"panel.needle",
		"parallelplot.resamples",
		"pcaNNet",
		"pcaNNet.default",
		"pickSizeBest",
		"pickSizeTolerance",
		"pickVars",
		"plot.gafs",
		"plot.rfe",
		"plot.train",
		"plotClassProbs",
		"plotObsVsPred",
		"plsBag",
		"plsda",
		"plsda.default",
		"posPredValue",
		"posPredValue.default",
		"posPredValue.table",
		"postResample",
		"predict.avNNet",
		"predict.bag",
		"predict.bagEarth",
		"predict.bagFDA",
		"predict.classDist",
		"predict.dummyVars",
		"predict.gafs",
		"predict.icr",
		"predict.knn3",
		"predict.knnreg",
		"predict.list",
		"predict.nullModel",
		"predict.pcaNNet",
		"predict.plsda",
		"predict.preProcess",
		"predict.splsda",
		"predict.train",
		"predictionFunction",
		"predictors",
		"preProcess",
		"preProcess.default",
		"print.train",
		"probFunction",
		"progress",
		"R2",
		"resampleHist",
		"resamples",
		"resamples.default",
		"resampleSummary",
		"resampleWrapper",
		"rfe",
		"rfe.default",
		"rfeControl",
		"rfeIter",
		"rfFuncs",
		"rfGA",
		"rfSA",
		"rfSBF",
		"rfStats",
		"RMSE",
		"safs",
		"safs_initial",
		"safs_perturb",
		"safs_prob",
		"safs.default",
		"safsControl",
		"sbf",
		"sbf.default",
		"sbf.formula",
		"sbfControl",
		"sbfIter",
		"sensitivity",
		"sensitivity.default",
		"sensitivity.table",
		"SLC14_1",
		"SLC14_2",
		"sortImp",
		"spatialSign",
		"spatialSign.data.frame",
		"spatialSign.default",
		"spatialSign.matrix",
		"specificity",
		"specificity.default",
		"specificity.table",
		"splsda",
		"splsda.default",
		"stripplot.rfe",
		"sumDiss",
		"summary.bagEarth",
		"summary.bagFDA",
		"svmBag",
		"tolerance",
		"train",
		"train.default",
		"train.formula",
		"trainControl",
		"treebagFuncs",
		"treebagGA",
		"treebagSA",
		"treebagSBF",
		"twoClassSim",
		"twoClassSummary",
		"upSample",
		"var_seq",
		"varImp",
		"varImp.bagEarth",
		"varImp.bagFDA",
		"varImp.plsda",
		"well_numbered",
		"xyplot.rfe"
	],
	"methods" : {
		"anovaScores" : "anovaScores(x, y) ",
		"as.data.frame.resamples" : "as.data.frame.resamples(x, row.names = NULL, optional = FALSE, metric = x$metric[1], ...) ",
		"as.matrix.resamples" : "as.matrix.resamples(x, metric = x$metric[1], ...) ",
		"avNNet" : "avNNet(x, ...) ",
		"avNNet.default" : "avNNet.default(x, y, repeats = 5, bag = FALSE, allowParallel = TRUE, seeds = sample.int(1e+05, repeats), ...) ",
		"bag" : "bag(x, ...) ",
		"bag.default" : "bag.default(x, y, B = 10, vars = ncol(x), bagControl = NULL, ...) ",
		"bagControl" : "bagControl(fit = NULL, predict = NULL, aggregate = NULL, downSample = FALSE, oob = TRUE, allowParallel = TRUE) ",
		"bagEarth" : "bagEarth(x, ...) ",
		"bagEarth.default" : "bagEarth.default(x, y, weights = NULL, B = 50, summary = mean, keepX = TRUE, ...) ",
		"bagEarth.formula" : "bagEarth.formula(formula, data = NULL, B = 50, summary = mean, keepX = TRUE, ..., subset, weights = NULL, na.action = na.omit) ",
		"bagEarthStats" : "bagEarthStats(x) ",
		"bagFDA" : "bagFDA(x, ...) ",
		"bagFDA.default" : "bagFDA.default(x, y, weights = NULL, B = 50, keepX = TRUE, ...) ",
		"bagFDA.formula" : "bagFDA.formula(formula, data = NULL, B = 50, keepX = TRUE, ..., subset, weights = NULL, na.action = na.omit) ",
		"best" : "best(x, metric, maximize) ",
		"BoxCoxTrans" : "BoxCoxTrans(y, ...) ",
		"calibration" : "calibration(x, ...) ",
		"caretTheme" : "caretTheme() ",
		"cforestStats" : "cforestStats(x) ",
		"checkConditionalX" : "checkConditionalX(x, y) ",
		"checkInstall" : "checkInstall(pkg) ",
		"checkResamples" : "checkResamples(index, x, y) ",
		"class2ind" : "class2ind(x, drop2nd = FALSE) ",
		"classDist" : "classDist(x, ...) ",
		"classDist.default" : "classDist.default(x, y, groups = 5, pca = FALSE, keep = NULL, ...) ",
		"cluster" : "cluster(x, ...) ",
		"cluster.resamples" : "cluster.resamples(x, metric = x$metrics[1], ...) ",
		"compare_models" : "compare_models(a, b, metric = a$metric[1]) ",
		"confusionMatrix" : "confusionMatrix(data, ...) ",
		"confusionMatrix.train" : "confusionMatrix.train(data, norm = \"overall\", dnn = c(\"Prediction\", \"Reference\"), ...) ",
		"contr.dummy" : "contr.dummy(n, ...) ",
		"contr.ltfr" : "contr.ltfr(n, contrasts = TRUE, sparse = FALSE) ",
		"createDataPartition" : "createDataPartition(y, times = 1, p = 0.5, list = TRUE, groups = min(5, length(y))) ",
		"createFolds" : "createFolds(y, k = 10, list = TRUE, returnTrain = FALSE) ",
		"createModel" : "createModel(x, y, wts, method, tuneValue, obsLevels, pp = NULL, last = FALSE, sampling = NULL, classProbs, ...) ",
		"createMultiFolds" : "createMultiFolds(y, k = 10, times = 5) ",
		"createResample" : "createResample(y, times = 10, list = TRUE) ",
		"createTimeSlices" : "createTimeSlices(y, initialWindow, horizon = 1, fixedWindow = TRUE, skip = 0) ",
		"defaultSummary" : "defaultSummary(data, lev = NULL, model = NULL) ",
		"densityplot.rfe" : "densityplot.rfe(x, data = NULL, metric = x$metric, ...) ",
		"densityplot.train" : "densityplot.train(x, data = NULL, metric = x$metric, ...) ",
		"dotPlot" : "dotPlot(x, top = min(20, dim(x$importance)[1]), ...) ",
		"downSample" : "downSample(x, y, list = FALSE, yname = \"Class\") ",
		"dummyVars" : "dummyVars(formula, ...) ",
		"dummyVars.default" : "dummyVars.default(formula, data, sep = \".\", levelsOnly = FALSE, fullRank = FALSE, ...) ",
		"expandParameters" : "expandParameters(fixed, seq) ",
		"expoTrans" : "expoTrans(y, ...) ",
		"extractPrediction" : "extractPrediction(models, testX = NULL, testY = NULL, unkX = NULL, unkOnly = !is.null(unkX) & is.null(testX), verbose = FALSE) ",
		"extractProb" : "extractProb(models, testX = NULL, testY = NULL, unkX = NULL, unkOnly = !is.null(unkX) & is.null(testX), verbose = FALSE) ",
		"featurePlot" : "featurePlot(x, y, plot = if (is.factor(y)) \"strip\" else \"scatter\", labels = c(\"Feature\", \"\"), ...) ",
		"filterVarImp" : "filterVarImp(x, y, nonpara = FALSE, ...) ",
		"findCorrelation" : "findCorrelation(x, cutoff = 0.9, verbose = FALSE, names = FALSE, exact = ncol(x) < 100) ",
		"findLinearCombos" : "findLinearCombos(x) ",
		"flatTable" : "flatTable(pred, obs) ",
		"gafs" : "gafs(x, ...) ",
		"gafs_initial" : "gafs_initial(vars, popSize, ...) ",
		"gafs_lrSelection" : "gafs_lrSelection(population, fitness, r = NULL, q = NULL, ...) ",
		"gafs_raMutation" : "gafs_raMutation(population, parent, ...) ",
		"gafs_rwSelection" : "gafs_rwSelection(population, fitness, ...) ",
		"gafs_spCrossover" : "gafs_spCrossover(population, fitness, parents, ...) ",
		"gafs_tourSelection" : "gafs_tourSelection(population, fitness, k = 3, ...) ",
		"gafs_uCrossover" : "gafs_uCrossover(population, parents, ...) ",
		"gafs.default" : "gafs.default(x, y, iters = 10, popSize = 50, pcrossover = 0.8, pmutation = 0.1, elite = 0, suggestions = NULL, differences = TRUE, gafsControl = gafsControl(), ...) ",
		"gafsControl" : "gafsControl(functions = NULL, method = \"repeatedcv\", metric = NULL, maximize = NULL, number = ifelse(grepl(\"cv\", method), 10,     25), repeats = ifelse(grepl(\"cv\", method), 1, 5), verbose = FALSE, returnResamp = \"final\", p = 0.75, index = NULL, indexOut = NULL, seeds = NULL, holdout = 0, genParallel = FALSE, allowParallel = TRUE) ",
		"gamFormula" : "gamFormula(data, smoother = \"s\", cut = 8, y = \"y\") ",
		"gamScores" : "gamScores(x, y) ",
		"getModelInfo" : "getModelInfo(model = NULL, regex = TRUE, ...) ",
		"getSamplingInfo" : "getSamplingInfo(method = NULL, regex = TRUE, ...) ",
		"getTrainPerf" : "getTrainPerf(x) ",
		"ggplot.rfe" : "ggplot.rfe(data = NULL, mapping = NULL, metric = data$metric[1], output = \"layered\", ..., environment = NULL) ",
		"ggplot.train" : "ggplot.train(data = NULL, mapping = NULL, metric = data$metric[1], plotType = \"scatter\", output = \"layered\", nameInStrip = FALSE, highlight = FALSE, ..., environment = NULL) ",
		"hasTerms" : "hasTerms(x) ",
		"histogram.rfe" : "histogram.rfe(x, data = NULL, metric = x$metric, ...) ",
		"icr" : "icr(x, ...) ",
		"icr.default" : "icr.default(x, y, ...) ",
		"icr.formula" : "icr.formula(formula, data, weights, ..., subset, na.action, contrasts = NULL) ",
		"index2vec" : "index2vec(x, vars, sign = FALSE) ",
		"ipredStats" : "ipredStats(x) ",
		"knn3" : "knn3(x, ...) ",
		"knn3.data.frame" : "knn3.data.frame(x, y, k = 5, ...) ",
		"knn3.formula" : "knn3.formula(formula, data, subset, na.action, k = 5, ...) ",
		"knn3.matrix" : "knn3.matrix(x, y, k = 5, ...) ",
		"knn3Train" : "knn3Train(train, test, cl, k = 1, l = 0, prob = TRUE, use.all = TRUE) ",
		"knnreg" : "knnreg(x, ...) ",
		"knnreg.data.frame" : "knnreg.data.frame(x, y, k = 5, ...) ",
		"knnreg.default" : "knnreg.default(x, ...) ",
		"knnreg.matrix" : "knnreg.matrix(x, y, k = 5, ...) ",
		"knnregTrain" : "knnregTrain(train, test, y, k = 5, use.all = TRUE) ",
		"learing_curve_dat" : "learing_curve_dat(dat, outcome = NULL, proportion = (1:10)/10, test_prop = 0, verbose = TRUE, ...) ",
		"lift" : "lift(x, ...) ",
		"LPH07_1" : "LPH07_1(n = 100, noiseVars = 0, corrVars = 0, corrType = \"AR1\", corrValue = 0, factors = FALSE, class = FALSE) ",
		"LPH07_2" : "LPH07_2(n = 100, noiseVars = 0, corrVars = 0, corrType = \"AR1\", corrValue = 0) ",
		"maxDissim" : "maxDissim(a, b, n = 2, obj = minDiss, useNames = FALSE, randomFrac = 1, verbose = FALSE, ...) ",
		"MeanSD" : "MeanSD(x, exclude = NULL) ",
		"minDiss" : "minDiss(u) ",
		"mnLogLoss" : "mnLogLoss(data, lev = NULL, model = NULL) ",
		"modelCor" : "modelCor(x, metric = x$metric[1], ...) ",
		"modelLookup" : "modelLookup(model = NULL) ",
		"multiClassSummary" : "multiClassSummary(data, lev = NULL, model = NULL) ",
		"nearZeroVar" : "nearZeroVar(x, freqCut = 95/5, uniqueCut = 10, saveMetrics = FALSE, names = FALSE, foreach = FALSE, allowParallel = TRUE) ",
		"negPredValue" : "negPredValue(data, ...) ",
		"negPredValue.default" : "negPredValue.default(data, reference, negative = levels(reference)[2], prevalence = NULL, ...) ",
		"negPredValue.table" : "negPredValue.table(data, negative = rownames(data)[-1], prevalence = NULL, ...) ",
		"nullModel" : "nullModel(x, ...) ",
		"nullModel.default" : "nullModel.default(x = NULL, y, ...) ",
		"nzv" : "nzv(x, freqCut = 95/5, uniqueCut = 10, saveMetrics = FALSE, names = FALSE) ",
		"oneSE" : "oneSE(x, metric, num, maximize) ",
		"panel.calibration" : "panel.calibration(...) ",
		"panel.lift" : "panel.lift(x, y, ...) ",
		"panel.lift2" : "panel.lift2(x, y, pct = 0, values = NULL, ...) ",
		"panel.needle" : "panel.needle(x, y, horizontal = TRUE, pch = if (is.null(groups)) dot.symbol$pch else sup.symbol$pch, col = if (is.null(groups)) dot.symbol$col else sup.symbol$col, lty = dot.line$lty, lwd = dot.line$lwd, col.line = dot.line$col, levels.fos = NULL, groups = NULL, ...) ",
		"parallelplot.resamples" : "parallelplot.resamples(x, data = NULL, models = x$models, metric = x$metric[1], ...) ",
		"pcaNNet" : "pcaNNet(x, ...) ",
		"pcaNNet.default" : "pcaNNet.default(x, y, thresh = 0.99, ...) ",
		"pickSizeBest" : "pickSizeBest(x, metric, maximize) ",
		"pickSizeTolerance" : "pickSizeTolerance(x, metric, tol = 1.5, maximize) ",
		"pickVars" : "pickVars(y, size) ",
		"plot.gafs" : "plot.gafs(x, metric = x$control$metric[\"external\"], estimate = c(\"internal\", \"external\"), output = \"ggplot\", ...) ",
		"plot.rfe" : "plot.rfe(x, metric = x$metric, ...) ",
		"plot.train" : "plot.train(x, plotType = \"scatter\", metric = x$metric[1], digits = getOption(\"digits\") - 3, xTrans = NULL, nameInStrip = FALSE, ...) ",
		"plotClassProbs" : "plotClassProbs(object, plotType = \"histogram\", useObjects = FALSE, ...) ",
		"plotObsVsPred" : "plotObsVsPred(object, equalRanges = TRUE, ...) ",
		"plsda" : "plsda(x, ...) ",
		"plsda.default" : "plsda.default(x, y, ncomp = 2, probMethod = \"softmax\", prior = NULL, ...) ",
		"posPredValue" : "posPredValue(data, ...) ",
		"posPredValue.default" : "posPredValue.default(data, reference, positive = levels(reference)[1], prevalence = NULL, ...) ",
		"posPredValue.table" : "posPredValue.table(data, positive = rownames(data)[1], prevalence = NULL, ...) ",
		"postResample" : "postResample(pred, obs) ",
		"predict.avNNet" : "predict.avNNet(object, newdata, type = c(\"raw\", \"class\", \"prob\"), ...) ",
		"predict.bag" : "predict.bag(object, newdata = NULL, ...) ",
		"predict.bagEarth" : "predict.bagEarth(object, newdata = NULL, type = \"response\", ...) ",
		"predict.bagFDA" : "predict.bagFDA(object, newdata = NULL, type = \"class\", ...) ",
		"predict.classDist" : "predict.classDist(object, newdata, trans = log, ...) ",
		"predict.dummyVars" : "predict.dummyVars(object, newdata, na.action = na.pass, ...) ",
		"predict.gafs" : "predict.gafs(object, newdata, ...) ",
		"predict.icr" : "predict.icr(object, newdata, ...) ",
		"predict.knn3" : "predict.knn3(object, newdata, type = c(\"prob\", \"class\"), ...) ",
		"predict.knnreg" : "predict.knnreg(object, newdata, ...) ",
		"predict.list" : "predict.list(object, ...) ",
		"predict.nullModel" : "predict.nullModel(object, newdata = NULL, type = NULL, ...) ",
		"predict.pcaNNet" : "predict.pcaNNet(object, newdata, type = c(\"raw\", \"class\", \"prob\"), ...) ",
		"predict.plsda" : "predict.plsda(object, newdata = NULL, ncomp = NULL, type = \"class\", ...) ",
		"predict.preProcess" : "predict.preProcess(object, newdata, ...) ",
		"predict.splsda" : "predict.splsda(object, newdata = NULL, type = \"class\", ...) ",
		"predict.train" : "predict.train(object, newdata = NULL, type = \"raw\", na.action = na.omit, ...) ",
		"predictionFunction" : "predictionFunction(method, modelFit, newdata, preProc = NULL, param = NULL) ",
		"predictors" : "predictors(x, ...) ",
		"preProcess" : "preProcess(x, ...) ",
		"preProcess.default" : "preProcess.default(x, method = c(\"center\", \"scale\"), thresh = 0.95, pcaComp = NULL, na.remove = TRUE, k = 5, knnSummary = mean, outcome = NULL, fudge = 0.2, numUnique = 3, verbose = FALSE, ...) ",
		"print.train" : "print.train(x, printCall = FALSE, details = FALSE, selectCol = FALSE, showSD = FALSE, ...) ",
		"probFunction" : "probFunction(method, modelFit, newdata = NULL, preProc = NULL, param = NULL) ",
		"progress" : "progress(x, names, iter, start = TRUE) ",
		"R2" : "R2(pred, obs, formula = \"corr\", na.rm = FALSE) ",
		"resampleHist" : "resampleHist(object, type = \"density\", ...) ",
		"resamples" : "resamples(x, ...) ",
		"resamples.default" : "resamples.default(x, modelNames = names(x), ...) ",
		"resampleSummary" : "resampleSummary(obs, resampled, index = NULL, keepData = TRUE) ",
		"resampleWrapper" : "resampleWrapper(x, ind) ",
		"rfe" : "rfe(x, ...) ",
		"rfe.default" : "rfe.default(x, y, sizes = 2^(2:4), metric = ifelse(is.factor(y), \"Accuracy\", \"RMSE\"), maximize = ifelse(metric == \"RMSE\", FALSE, TRUE), rfeControl = rfeControl(), ...) ",
		"rfeControl" : "rfeControl(functions = NULL, rerank = FALSE, method = \"boot\", saveDetails = FALSE, number = ifelse(method %in% c(\"cv\",     \"repeatedcv\"), 10, 25), repeats = ifelse(method %in%     c(\"cv\", \"repeatedcv\"), 1, number), verbose = FALSE, returnResamp = \"final\", p = 0.75, index = NULL, indexOut = NULL, timingSamps = 0, seeds = NA, allowParallel = TRUE) ",
		"rfeIter" : "rfeIter(x, y, testX, testY, sizes, rfeControl = rfeControl(), label = \"\", seeds = NA, ...) ",
		"rfStats" : "rfStats(x) ",
		"RMSE" : "RMSE(pred, obs, na.rm = FALSE) ",
		"safs" : "safs(x, ...) ",
		"safs_initial" : "safs_initial(vars, prob = 0.2, ...) ",
		"safs_perturb" : "safs_perturb(x, vars, number = floor(vars * 0.01) + 1) ",
		"safs_prob" : "safs_prob(old, new, iteration = 1) ",
		"safs.default" : "safs.default(x, y, iters = 10, differences = TRUE, safsControl = safsControl(), ...) ",
		"safsControl" : "safsControl(functions = NULL, method = \"repeatedcv\", metric = NULL, maximize = NULL, number = ifelse(grepl(\"cv\", method), 10,     25), repeats = ifelse(grepl(\"cv\", method), 1, 5), verbose = FALSE, returnResamp = \"final\", p = 0.75, index = NULL, indexOut = NULL, seeds = NULL, holdout = 0, improve = Inf, allowParallel = TRUE) ",
		"sbf" : "sbf(x, ...) ",
		"sbf.default" : "sbf.default(x, y, sbfControl = sbfControl(), ...) ",
		"sbf.formula" : "sbf.formula(form, data, ..., subset, na.action, contrasts = NULL) ",
		"sbfControl" : "sbfControl(functions = NULL, method = \"boot\", saveDetails = FALSE, number = ifelse(method %in% c(\"cv\", \"repeatedcv\"), 10, 25), repeats = ifelse(method %in% c(\"cv\", \"repeatedcv\"), 1, number), verbose = FALSE, returnResamp = \"final\", p = 0.75, index = NULL, indexOut = NULL, timingSamps = 0, seeds = NA, allowParallel = TRUE, multivariate = FALSE) ",
		"sbfIter" : "sbfIter(x, y, testX, testY, sbfControl = sbfControl(), ...) ",
		"sensitivity" : "sensitivity(data, ...) ",
		"sensitivity.default" : "sensitivity.default(data, reference, positive = levels(reference)[1], na.rm = TRUE, ...) ",
		"sensitivity.table" : "sensitivity.table(data, positive = rownames(data)[1], ...) ",
		"SLC14_1" : "SLC14_1(n = 100, noiseVars = 0, corrVars = 0, corrType = \"AR1\", corrValue = 0) ",
		"SLC14_2" : "SLC14_2(n = 100, noiseVars = 0, corrVars = 0, corrType = \"AR1\", corrValue = 0) ",
		"sortImp" : "sortImp(object, top) ",
		"spatialSign" : "spatialSign(x) ",
		"spatialSign.data.frame" : "spatialSign.data.frame(x) ",
		"spatialSign.default" : "spatialSign.default(x) ",
		"spatialSign.matrix" : "spatialSign.matrix(x) ",
		"specificity" : "specificity(data, ...) ",
		"specificity.default" : "specificity.default(data, reference, negative = levels(reference)[-1], na.rm = TRUE, ...) ",
		"specificity.table" : "specificity.table(data, negative = rownames(data)[-1], ...) ",
		"splsda" : "splsda(x, ...) ",
		"splsda.default" : "splsda.default(x, y, probMethod = \"softmax\", prior = NULL, ...) ",
		"stripplot.rfe" : "stripplot.rfe(x, data = NULL, metric = x$metric, ...) ",
		"sumDiss" : "sumDiss(u) ",
		"summary.bagEarth" : "summary.bagEarth(object, ...) ",
		"summary.bagFDA" : "summary.bagFDA(object, ...) ",
		"tolerance" : "tolerance(x, metric, tol = 1.5, maximize) ",
		"train" : "train(x, ...) ",
		"train.default" : "train.default(x, y, method = \"rf\", preProcess = NULL, ..., weights = NULL, metric = ifelse(is.factor(y), \"Accuracy\", \"RMSE\"), maximize = ifelse(metric %in%     c(\"RMSE\", \"logLoss\"), FALSE, TRUE), trControl = trainControl(), tuneGrid = NULL, tuneLength = 3) ",
		"train.formula" : "train.formula(form, data, ..., weights, subset, na.action = na.fail, contrasts = NULL) ",
		"trainControl" : "trainControl(method = \"boot\", number = ifelse(grepl(\"cv\", method), 10, 25), repeats = ifelse(grepl(\"cv\", method), 1, number), p = 0.75, search = \"grid\", initialWindow = NULL, horizon = 1, fixedWindow = TRUE, verboseIter = FALSE, returnData = TRUE, returnResamp = \"final\", savePredictions = FALSE, classProbs = FALSE, summaryFunction = defaultSummary, selectionFunction = \"best\", preProcOptions = list(thresh = 0.95, ICAcomp = 3, k = 5), sampling = NULL, index = NULL, indexOut = NULL, indexFinal = NULL, timingSamps = 0, predictionBounds = rep(FALSE, 2), seeds = NA, adaptive = list(min = 5, alpha = 0.05, method = \"gls\", complete = TRUE), trim = FALSE, allowParallel = TRUE) ",
		"twoClassSim" : "twoClassSim(n = 100, intercept = -5, linearVars = 10, noiseVars = 0, corrVars = 0, corrType = \"AR1\", corrValue = 0, mislabel = 0) ",
		"twoClassSummary" : "twoClassSummary(data, lev = NULL, model = NULL) ",
		"upSample" : "upSample(x, y, list = FALSE, yname = \"Class\") ",
		"var_seq" : "var_seq(p, classification = FALSE, len = 3) ",
		"varImp" : "varImp(object, ...) ",
		"varImp.bagEarth" : "varImp.bagEarth(object, ...) ",
		"varImp.bagFDA" : "varImp.bagFDA(object, ...) ",
		"varImp.plsda" : "varImp.plsda(object, ...) ",
		"well_numbered" : "well_numbered(prefix, items) ",
		"xyplot.rfe" : "xyplot.rfe(x, data = NULL, metric = x$metric, ...) "
	}
}