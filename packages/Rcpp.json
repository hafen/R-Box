{
	"objects" : [
		"compileAttributes",
		"cpp_object_dummy",
		"cpp_object_initializer",
		"cppFunction",
		"demangle",
		"evalCpp",
		"exposeClass",
		"initialize",
		"LdFlags",
		"loadModule",
		"loadRcppClass",
		"loadRcppModules",
		"Module",
		"populate",
		"prompt",
		"Rcpp.package.skeleton",
		"Rcpp.plugin.maker",
		"RcppLdFlags",
		"registerPlugin",
		"setRcppClass",
		"show",
		"sizeof",
		"sourceCpp"
	],
	"methods" : {
		"compileAttributes" : "compileAttributes(pkgdir = \".\", verbose = getOption(\"verbose\")) ",
		"cpp_object_dummy" : "cpp_object_dummy(.self, .refClassDef) ",
		"cpp_object_initializer" : "cpp_object_initializer(.self, .refClassDef, ..., .object_pointer) ",
		"cppFunction" : "cppFunction(code, depends = character(), plugins = character(), includes = character(), env = parent.frame(), rebuild = FALSE, showOutput = verbose, verbose = getOption(\"verbose\")) ",
		"demangle" : "demangle(type = \"int\", ...) ",
		"evalCpp" : "evalCpp(code, depends = character(), plugins = character(), includes = character(), rebuild = FALSE, showOutput = verbose, verbose = getOption(\"verbose\")) ",
		"exposeClass" : "exposeClass(class, constructors, fields, methods, file = paste0(CppClass, \"Module.cpp\"), header = character(), module = paste0(\"class_\", class), CppClass = class, readOnly = character(), rename = character(), Rfile = TRUE) ",
		"initialize" : "initialize(.Object, ...) ",
		"LdFlags" : "LdFlags() ",
		"loadModule" : "loadModule(module, what = character(), loadNow, env = topenv(parent.frame())) ",
		"loadRcppClass" : "loadRcppClass(Class, CppClass = Class, module = paste0(\"class_\", Class), fields = character(), contains = character(), methods = list(), saveAs = Class, where = topenv(parent.frame()), ...) ",
		"loadRcppModules" : "loadRcppModules(direct = TRUE) ",
		"Module" : "Module(module, PACKAGE = methods::getPackageName(where), where = topenv(parent.frame()), mustStart = FALSE) ",
		"populate" : "populate(module, env) ",
		"prompt" : "prompt(object, filename = NULL, name = NULL, ...) ",
		"Rcpp.package.skeleton" : "Rcpp.package.skeleton(name = \"anRpackage\", list = character(), environment = .GlobalEnv, path = \".\", force = FALSE, code_files = character(), cpp_files = character(), example_code = TRUE, attributes = TRUE, module = FALSE, author = \"Your Name\", maintainer = if (missing(author)) \"Your Name\" else author, email = \"your@email.com\", license = \"GPL (>= 2)\") ",
		"Rcpp.plugin.maker" : "Rcpp.plugin.maker(include.before = \"\", include.after = \"\", LinkingTo = unique(c(package, \"Rcpp\")), Depends = unique(c(package, \"Rcpp\")), libs = \"\", Makevars = NULL, Makevars.win = NULL, package = \"Rcpp\") ",
		"RcppLdFlags" : "RcppLdFlags() ",
		"registerPlugin" : "registerPlugin(name, plugin) ",
		"setRcppClass" : "setRcppClass(Class, CppClass, module, fields = list(), contains = character(), methods = list(), saveAs = Class, where = topenv(parent.frame()), ...) ",
		"show" : "show(object) ",
		"sizeof" : "sizeof(type = \"int\", ...) ",
		"sourceCpp" : "sourceCpp(file = \"\", code = NULL, env = globalenv(), embeddedR = TRUE, rebuild = FALSE, showOutput = verbose, verbose = getOption(\"verbose\"), dryRun = FALSE) "
	}
}