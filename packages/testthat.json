{
	"objects" : [
		"auto_test",
		"auto_test_package",
		"capture_messages",
		"capture_output",
		"capture_warnings",
		"CheckReporter",
		"compare",
		"context",
		"describe",
		"equals",
		"equals_reference",
		"evaluate_promise",
		"expect",
		"expect_cpp_tests_pass",
		"expect_equal",
		"expect_equal_to_reference",
		"expect_equivalent",
		"expect_error",
		"expect_failure",
		"expect_false",
		"expect_gt",
		"expect_gte",
		"expect_identical",
		"expect_is",
		"expect_length",
		"expect_less_than",
		"expect_lt",
		"expect_lte",
		"expect_match",
		"expect_message",
		"expect_more_than",
		"expect_named",
		"expect_null",
		"expect_output",
		"expect_output_file",
		"expect_s3_class",
		"expect_s4_class",
		"expect_silent",
		"expect_success",
		"expect_that",
		"expect_true",
		"expect_type",
		"expect_warning",
		"expectation",
		"fail",
		"FailReporter",
		"find_test_scripts",
		"get_reporter",
		"gives_warning",
		"has_names",
		"is_a",
		"is_equivalent_to",
		"is_false",
		"is_identical_to",
		"is_less_than",
		"is_more_than",
		"is_null",
		"is_true",
		"is.expectation",
		"ListReporter",
		"make_expectation",
		"matches",
		"MinimalReporter",
		"MultiReporter",
		"not",
		"prints_text",
		"Reporter",
		"RstudioReporter",
		"set_reporter",
		"shows_message",
		"SilentReporter",
		"skip",
		"skip_if_not",
		"skip_if_not_installed",
		"skip_on_appveyor",
		"skip_on_bioc",
		"skip_on_cran",
		"skip_on_os",
		"skip_on_travis",
		"source_dir",
		"source_file",
		"source_test_helpers",
		"StopReporter",
		"succeed",
		"SummaryReporter",
		"takes_less_than",
		"TapReporter",
		"TeamcityReporter",
		"test_check",
		"test_dir",
		"test_env",
		"test_example",
		"test_examples",
		"test_file",
		"test_package",
		"test_path",
		"test_that",
		"throws_error",
		"try_again",
		"use_catch",
		"watch",
		"with_mock",
		"with_reporter"
	],
	"methods" : {
		"auto_test" : "auto_test(code_path, test_path, reporter = \"summary\", env = test_env()) ",
		"auto_test_package" : "auto_test_package(pkg = \".\", reporter = \"summary\") ",
		"capture_messages" : "capture_messages(code) ",
		"capture_output" : "capture_output(code, print = FALSE) ",
		"capture_warnings" : "capture_warnings(code) ",
		"compare" : "compare(x, y, ...) ",
		"context" : "context(desc) ",
		"describe" : "describe(description, code) ",
		"equals" : "equals(expected, label = NULL, ...) ",
		"equals_reference" : "equals_reference(file, label = NULL, ...) ",
		"evaluate_promise" : "evaluate_promise(code, print = FALSE) ",
		"expect" : "expect(exp, ..., srcref = NULL) ",
		"expect_cpp_tests_pass" : "expect_cpp_tests_pass(package) ",
		"expect_equal" : "expect_equal(object, expected, ..., info = NULL, label = NULL, expected.label = NULL) ",
		"expect_equal_to_reference" : "expect_equal_to_reference(object, file, ..., info = NULL, label = NULL, expected.label = NULL) ",
		"expect_equivalent" : "expect_equivalent(object, expected, info = NULL, label = NULL, expected.label = NULL) ",
		"expect_error" : "expect_error(object, regexp = NULL, ..., info = NULL, label = NULL) ",
		"expect_failure" : "expect_failure(expr, message = NULL, ...) ",
		"expect_false" : "expect_false(object, info = NULL, label = NULL) ",
		"expect_gt" : "expect_gt(object, expected, label = NULL, expected.label = NULL) ",
		"expect_gte" : "expect_gte(object, expected, label = NULL, expected.label = NULL) ",
		"expect_identical" : "expect_identical(object, expected, info = NULL, label = NULL, expected.label = NULL) ",
		"expect_is" : "expect_is(object, class, info = NULL, label = NULL) ",
		"expect_length" : "expect_length(object, n) ",
		"expect_less_than" : "expect_less_than(...) ",
		"expect_lt" : "expect_lt(object, expected, label = NULL, expected.label = NULL) ",
		"expect_lte" : "expect_lte(object, expected, label = NULL, expected.label = NULL) ",
		"expect_match" : "expect_match(object, regexp, ..., all = TRUE, info = NULL, label = NULL) ",
		"expect_message" : "expect_message(object, regexp = NULL, ..., all = FALSE, info = NULL, label = NULL) ",
		"expect_more_than" : "expect_more_than(...) ",
		"expect_named" : "expect_named(object, expected, ignore.order = FALSE, ignore.case = FALSE, info = NULL, label = NULL) ",
		"expect_null" : "expect_null(object, info = NULL, label = NULL) ",
		"expect_output" : "expect_output(object, regexp = NULL, ..., info = NULL, label = NULL) ",
		"expect_output_file" : "expect_output_file(object, file, update = FALSE, ..., info = NULL, label = NULL) ",
		"expect_s3_class" : "expect_s3_class(object, class) ",
		"expect_s4_class" : "expect_s4_class(object, class) ",
		"expect_silent" : "expect_silent(object) ",
		"expect_success" : "expect_success(expr) ",
		"expect_that" : "expect_that(object, condition, info = NULL, label = NULL) ",
		"expect_true" : "expect_true(object, info = NULL, label = NULL) ",
		"expect_type" : "expect_type(object, type) ",
		"expect_warning" : "expect_warning(object, regexp = NULL, ..., all = FALSE, info = NULL, label = NULL) ",
		"expectation" : "expectation(type, message, srcref = NULL) ",
		"fail" : "fail(message = \"Failure has been forced\") ",
		"find_test_scripts" : "find_test_scripts(path, filter = NULL, invert = FALSE, ...) ",
		"get_reporter" : "get_reporter() ",
		"gives_warning" : "gives_warning(regexp = NULL, all = FALSE, ...) ",
		"has_names" : "has_names(expected, ignore.order = FALSE, ignore.case = FALSE) ",
		"is_a" : "is_a(class) ",
		"is_equivalent_to" : "is_equivalent_to(expected, label = NULL) ",
		"is_false" : "is_false() ",
		"is_identical_to" : "is_identical_to(expected, label = NULL) ",
		"is_less_than" : "is_less_than(expected, label = NULL, ...) ",
		"is_more_than" : "is_more_than(expected, label = NULL, ...) ",
		"is_null" : "is_null() ",
		"is_true" : "is_true() ",
		"is.expectation" : "is.expectation(x) ",
		"make_expectation" : "make_expectation(x, expectation = \"equals\") ",
		"matches" : "matches(regexp, all = TRUE, ...) ",
		"not" : "not(f) ",
		"prints_text" : "prints_text(regexp = NULL, ...) ",
		"set_reporter" : "set_reporter(reporter) ",
		"shows_message" : "shows_message(regexp = NULL, all = FALSE, ...) ",
		"skip" : "skip(message) ",
		"skip_if_not" : "skip_if_not(condition, message = deparse(substitute(condition))) ",
		"skip_if_not_installed" : "skip_if_not_installed(pkg) ",
		"skip_on_appveyor" : "skip_on_appveyor() ",
		"skip_on_bioc" : "skip_on_bioc() ",
		"skip_on_cran" : "skip_on_cran() ",
		"skip_on_os" : "skip_on_os(os) ",
		"skip_on_travis" : "skip_on_travis() ",
		"source_dir" : "source_dir(path, pattern = \"\\\\.[rR]$\", env = test_env(), chdir = TRUE) ",
		"source_file" : "source_file(path, env = test_env(), chdir = TRUE) ",
		"source_test_helpers" : "source_test_helpers(path = \"tests/testthat\", env = test_env()) ",
		"succeed" : "succeed(message = \"Success has been forced\") ",
		"takes_less_than" : "takes_less_than(amount) ",
		"test_check" : "test_check(package, filter = NULL, reporter = \"check\", ...) ",
		"test_dir" : "test_dir(path, filter = NULL, reporter = \"summary\", env = test_env(), ...) ",
		"test_env" : "test_env() ",
		"test_example" : "test_example(path) ",
		"test_examples" : "test_examples(path = \"../../man\") ",
		"test_file" : "test_file(path, reporter = \"summary\", env = test_env(), start_end_reporter = TRUE, load_helpers = TRUE) ",
		"test_package" : "test_package(package, filter = NULL, reporter = \"summary\", ...) ",
		"test_path" : "test_path(...) ",
		"test_that" : "test_that(desc, code) ",
		"throws_error" : "throws_error(regexp = NULL, ...) ",
		"try_again" : "try_again(times, code) ",
		"use_catch" : "use_catch(dir = getwd()) ",
		"watch" : "watch(path, callback, pattern = NULL, hash = TRUE) ",
		"with_mock" : "with_mock(..., .env = topenv()) ",
		"with_reporter" : "with_reporter(reporter, code, start_end_reporter = TRUE) "
	}
}