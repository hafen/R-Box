{
	"objects" : [
		"auc",
		"auc.mat",
		"coef.cv.glmnet",
		"coef.glmnet",
		"coefnorm",
		"coxnet",
		"coxnet.deviance",
		"cv.coxnet",
		"cv.elnet",
		"cv.fishnet",
		"cv.glmnet",
		"cv.lognet",
		"cv.mrelnet",
		"cv.multnet",
		"cvcompute",
		"deviance.glmnet",
		"elnet",
		"fishnet",
		"getcoef",
		"getcoef.multinomial",
		"getmin",
		"glmnet",
		"glmnet_softmax",
		"glmnet.control",
		"jerr",
		"jerr.coxnet",
		"jerr.elnet",
		"jerr.fishnet",
		"jerr.lognet",
		"jerr.mrelnet",
		"lambda.interp",
		"lognet",
		"mrelnet",
		"na.mean",
		"nonzeroCoef",
		"plot.cv.glmnet",
		"plot.glmnet",
		"plot.mrelnet",
		"plot.multnet",
		"plotCoef",
		"predict.coxnet",
		"predict.cv.glmnet",
		"predict.elnet",
		"predict.fishnet",
		"predict.glmnet",
		"predict.lognet",
		"predict.mrelnet",
		"predict.multnet",
		"print.glmnet",
		"response.coxnet",
		"rmult"
	],
	"methods" : {
		"auc" : "auc(y, prob, w) ",
		"auc.mat" : "auc.mat(y, prob, weights = rep(1, nrow(y))) ",
		"coef.cv.glmnet" : "coef.cv.glmnet(object, s = c(\"lambda.1se\", \"lambda.min\"), ...) ",
		"coef.glmnet" : "coef.glmnet(object, s = NULL, exact = FALSE, ...) ",
		"coefnorm" : "coefnorm(coeflist, q = 1) ",
		"coxnet" : "coxnet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh, isd, vnames, maxit) ",
		"coxnet.deviance" : "coxnet.deviance(pred = NULL, y, x = 0, offset = pred, weights = NULL, beta = NULL) ",
		"cv.coxnet" : "cv.coxnet(outlist, lambda, x, y, weights, offset, foldid, type.measure, grouped, keep = FALSE) ",
		"cv.elnet" : "cv.elnet(outlist, lambda, x, y, weights, offset, foldid, type.measure, grouped, keep = FALSE) ",
		"cv.fishnet" : "cv.fishnet(outlist, lambda, x, y, weights, offset, foldid, type.measure, grouped, keep = FALSE) ",
		"cv.glmnet" : "cv.glmnet(x, y, weights, offset = NULL, lambda = NULL, type.measure = c(\"mse\", \"deviance\", \"class\", \"auc\", \"mae\"), nfolds = 10, foldid, grouped = TRUE, keep = FALSE, parallel = FALSE, ...) ",
		"cv.lognet" : "cv.lognet(outlist, lambda, x, y, weights, offset, foldid, type.measure, grouped, keep = FALSE) ",
		"cv.mrelnet" : "cv.mrelnet(outlist, lambda, x, y, weights, offset, foldid, type.measure, grouped, keep = FALSE) ",
		"cv.multnet" : "cv.multnet(outlist, lambda, x, y, weights, offset, foldid, type.measure, grouped, keep = FALSE) ",
		"cvcompute" : "cvcompute(mat, weights, foldid, nlams) ",
		"deviance.glmnet" : "deviance.glmnet(object, ...) ",
		"elnet" : "elnet(x, is.sparse, ix, jx, y, weights, offset, type.gaussian = c(\"covariance\", \"naive\"), alpha, nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh, isd, intr, vnames, maxit) ",
		"fishnet" : "fishnet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh, isd, intr, vnames, maxit) ",
		"getcoef" : "getcoef(fit, nvars, nx, vnames) ",
		"getcoef.multinomial" : "getcoef.multinomial(fit, nvars, nx, vnames, nc, classnames, center.intercept = TRUE) ",
		"getmin" : "getmin(lambda, cvm, cvsd) ",
		"glmnet" : "glmnet(x, y, family = c(\"gaussian\", \"binomial\", \"poisson\", \"multinomial\", \"cox\", \"mgaussian\"), weights, offset = NULL, alpha = 1, nlambda = 100, lambda.min.ratio = ifelse(nobs <     nvars, 0.01, 1e-04), lambda = NULL, standardize = TRUE, intercept = TRUE, thresh = 1e-07, dfmax = nvars + 1, pmax = min(dfmax *     2 + 20, nvars), exclude, penalty.factor = rep(1, nvars), lower.limits = -Inf, upper.limits = Inf, maxit = 1e+05, type.gaussian = ifelse(nvars <     500, \"covariance\", \"naive\"), type.logistic = c(\"Newton\",     \"modified.Newton\"), standardize.response = FALSE, type.multinomial = c(\"ungrouped\",     \"grouped\")) ",
		"glmnet_softmax" : "glmnet_softmax(x) ",
		"glmnet.control" : "glmnet.control(fdev = 1e-05, devmax = 0.999, eps = 1e-06, big = 9.9e+35, mnlam = 5, pmin = 1e-09, exmx = 250, prec = 1e-10, mxit = 100, factory = FALSE) ",
		"jerr" : "jerr(n, maxit, pmax, family) ",
		"jerr.coxnet" : "jerr.coxnet(n, maxit, pmax) ",
		"jerr.elnet" : "jerr.elnet(n, maxit, pmax) ",
		"jerr.fishnet" : "jerr.fishnet(n, maxit, pmax) ",
		"jerr.lognet" : "jerr.lognet(n, maxit, pmax) ",
		"jerr.mrelnet" : "jerr.mrelnet(n, maxit, pmax) ",
		"lambda.interp" : "lambda.interp(lambda, s) ",
		"lognet" : "lognet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh, isd, intr, vnames, maxit, kopt, family) ",
		"mrelnet" : "mrelnet(x, is.sparse, ix, jx, y, weights, offset, alpha, nobs, nvars, jd, vp, cl, ne, nx, nlam, flmin, ulam, thresh, isd, jsd, intr, vnames, maxit) ",
		"na.mean" : "na.mean(x) ",
		"nonzeroCoef" : "nonzeroCoef(beta, bystep = FALSE) ",
		"plot.cv.glmnet" : "plot.cv.glmnet(x, sign.lambda = 1, ...) ",
		"plot.glmnet" : "plot.glmnet(x, xvar = c(\"norm\", \"lambda\", \"dev\"), label = FALSE, ...) ",
		"plot.mrelnet" : "plot.mrelnet(x, xvar = c(\"norm\", \"lambda\", \"dev\"), label = FALSE, type.coef = c(\"coef\", \"2norm\"), ...) ",
		"plot.multnet" : "plot.multnet(x, xvar = c(\"norm\", \"lambda\", \"dev\"), label = FALSE, type.coef = c(\"coef\", \"2norm\"), ...) ",
		"plotCoef" : "plotCoef(beta, norm, lambda, df, dev, label = FALSE, xvar = c(\"norm\", \"lambda\", \"dev\"), xlab = iname, ylab = \"Coefficients\", ...) ",
		"predict.coxnet" : "predict.coxnet(object, newx, s = NULL, type = c(\"link\", \"response\", \"coefficients\", \"nonzero\"), exact = FALSE, offset, ...) ",
		"predict.cv.glmnet" : "predict.cv.glmnet(object, newx, s = c(\"lambda.1se\", \"lambda.min\"), ...) ",
		"predict.elnet" : "predict.elnet(object, newx, s = NULL, type = c(\"link\", \"response\", \"coefficients\", \"nonzero\"), exact = FALSE, offset, ...) ",
		"predict.fishnet" : "predict.fishnet(object, newx, s = NULL, type = c(\"link\", \"response\", \"coefficients\", \"nonzero\"), exact = FALSE, offset, ...) ",
		"predict.glmnet" : "predict.glmnet(object, newx, s = NULL, type = c(\"link\", \"response\", \"coefficients\", \"nonzero\", \"class\"), exact = FALSE, offset, ...) ",
		"predict.lognet" : "predict.lognet(object, newx, s = NULL, type = c(\"link\", \"response\", \"coefficients\", \"class\", \"nonzero\"), exact = FALSE, offset, ...) ",
		"predict.mrelnet" : "predict.mrelnet(object, newx, s = NULL, type = c(\"link\", \"response\", \"coefficients\", \"nonzero\"), exact = FALSE, offset, ...) ",
		"predict.multnet" : "predict.multnet(object, newx, s = NULL, type = c(\"link\", \"response\", \"coefficients\", \"class\", \"nonzero\"), exact = FALSE, offset, ...) ",
		"print.glmnet" : "print.glmnet(x, digits = max(3, getOption(\"digits\") - 3), ...) ",
		"response.coxnet" : "response.coxnet(y) ",
		"rmult" : "rmult(p) "
	}
}